# install pandas
pip install pandas

# Install Libraries
import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt

# Import IMDB movie dataset
df = pd.read_csv('IMDB-Movie-Data.csv')
df

# 1. Display Top 10 Rows of The Dataset
df.head(10)

# 2. Check Last 10 Rows of The Dataset
df.tail(10)

# 3. Find Shape of Our Dataset (Number of Rows And Number of Columns)
rows,columns = df.shape
print(f"The no. of rows are {rows} and columns are {columns}")

# 4. Getting Information About Our Dataset Like Total Number Rows, Total Number of Columns, Datatypes of Each Column And Memory Requirement
df.info()

# 5. Check Missing Values In The Dataset
print("Any missing values in IMDB movie dataset ? :", df.isnull().values.any())
  # sum() method is used to find out the sum of the True values
df.isnull().sum()
  # Visualize missing values using seaborn
sns.heatmap(df.isnull())
  # missing values in percentage
per_missing = round(df.isnull().sum() * 100 / len(df))
per_missing

# 6. Drop All The Missing Values
df.dropna(axis=0, inplace=True)

# 7. Check For Duplicate Data
dup_data = df.duplicated().any()
print("Are there any duplicate values ? :",dup_data)
  #To drop duplicate values
df = df.drop_duplicates()
df

# 8. Get Overall Statistics About The DataFrame
  # Statistical data Only for numerical data
df.describe()

# 9. Display Title of The Movie Having Runtime >= 180 Minutes
df['Title'][df['Runtime (Minutes)']>=180]

# 10. In Which Year There Was The Highest Average Voting?
df.groupby('Year')['Votes'].mean().sort_values(ascending=False)

# 11. In Which Year There Was The Highest Average Revenue?
df.groupby('Year')['Revenue (Millions)'].mean().sort_values(ascending=False)

# 12. Find The Average Rating For Each Director
df.groupby('Director')['Rating'].mean().sort_values()

# 13. Display Top 10 Lengthy Movies Title and Runtime
df.nlargest(10, 'Runtime (Minutes)')[['Title', 'Runtime (Minutes)']].set_index('Title')

# 14. Display Number of Movies Per Year
df['Year'].value_counts(ascending=True)

sns.countplot(x='Year',data=df)
plt.title("No. of movies per year")
plt.show()

# 15. Find Most Popular Movie Title (Higest Revenue)
df.nlargest(1,'Revenue (Millions)')['Title']

# 16. Display Top 10 Highest Rated Movie Titles And its Directors
df.nlargest(10, 'Rating')[['Title','Director','Rating']].set_index('Title')

# 17. Display Top 10 Highest Revenue Movie Titles
Top10_Highest_Revenue = df.nlargest(10,'Revenue (Millions)')[['Title', 'Revenue (Millions)']].set_index('Title')

sns.barplot(x='Revenue (Millions)', y=Top10_Highest_Revenue.index, data=Top10_Highest_Revenue)
plt.title("Top 10 Highest Revenue Movies")
plt.show()

# 18. Find Average Rating of Movies Year Wise
df.groupby('Year')['Rating'].mean().sort_values(ascending=False)

# 19. Does Rating Affect The Revenue?
sns.scatterplot(x='Rating', y='Revenue (Millions)', data=df)
plt.title('Rating vs Revenue')
plt.show()

# 20. Classify Movies Based on Ratings [Excellent, Good and Average]
def is_rating(rating):
    if rating >=8.0:
        return "Excellent"
    elif rating >=6.0:
        return "Good"
    else:
        return "Average"

df['Rating_category']=df['Rating'].apply(is_rating)

# 21. Count Number of Action Movies
cnt = len(df[df['Genre'].str.contains('Action', case=False)]) #case=False - case insensitive
print("The no. of action movies are :",cnt)

# 22. Find Unique Values From Genre

list1=[]
for value in df['Genre']:
    list1.append(value.split(','))

unique_val=[]
for val in one_list:
    if val not in unique_val:
        unique_val.append(val)

print(f"Count of unique values from 'Genre' is {len(unique_val)}")

# 23. How Many Films of Each Genre Were Made?

one_list=[]
for item in list1:
    for item1 in item:
        one_list.append(item1)

#Counter module is used in collections package to count films in each 'Genre'
from collections import Counter
Counter(one_list)
